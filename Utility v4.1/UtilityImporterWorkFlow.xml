<?xml version="1.0" encoding="utf-8"?>
<WorkFlow xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" Ident="UtilityImporterWorkFlow" xmlns:dsp="http://www.gappex.com/sfp/DataSource/Parameters" FormIdent="UtilityImporter" PackageIdent="Utility">
  <Definition>
    <States>
      <State Value="0" TitleResourceKey="Deleted_Utility" />
      <State Value="1" TitleResourceKey="New_Utility" />
    </States>
  </Definition>

  <Steps>
    <Step State="1">
      <Groups>
        <Group>
          <Permissions>
            <string>SuperAdmin</string>
          </Permissions>
          <Buttons>

            <Button Ident="ImportAsPermission" IsVisible="true">
              <Actions>
                <Action xsi:type="Required" ActionStart="BeforeValidation">
                  <Idents>
                    <string>ImportString</string>
                  </Idents>
                </Action>    

                <Action xsi:type="ActionTrigger" Ident="ImportAsPermissionAction" ActionStart="AfterSave">
                  <DataSource>
                    <SQL>
                      DECLARE @Output VARCHAR(MAX) = 'Inserting as Permission:' + CHAR(10);

                      SET @ImportString = REPLACE(@ImportString, ';', ',');

                      BEGIN TRY  
                        
                        DECLARE @tbl TABLE(
                          ID VARCHAR(MAX)
                          ,Weight VARCHAR(MAX)
                          ,ResourceKey VARCHAR(MAX)
                          ,IsComputed VARCHAR(MAX)
                          ,AnrName VARCHAR(MAX)
                          ,RoleResourceKey VARCHAR(MAX)
                          ,RoleVisibleType VARCHAR(MAX)
                          ,RoleDefaultValue VARCHAR(MAX)
                          ,ParentAnrName VARCHAR(MAX)
                        )
                        INSERT INTO @tbl EXEC usr.[ConvertFromCSV] @ImportString;

                        UPDATE @tbl
                        SET 
                          ID = IIF(ID = '', NULL, ID)
                          ,[Weight] = IIF([Weight] = '', NULL, [Weight])
                          ,ResourceKey = IIF(ResourceKey = '', NULL, ResourceKey)
                          ,IsComputed = IIF(IsComputed = '', NULL, IsComputed)
                          ,AnrName = IIF(AnrName = '', NULL, AnrName)
                          ,RoleResourceKey = IIF(RoleResourceKey = '', NULL, RoleResourceKey)
                          ,RoleVisibleType = IIF(RoleVisibleType = '', NULL, RoleVisibleType)
                          ,RoleDefaultValue = IIF(RoleDefaultValue = '', NULL, RoleDefaultValue)
                          ,ParentAnrName = IIF(ParentAnrName = '', NULL, ParentAnrName)

                        SELECT @Output = CONCAT(@Output, tbl.ID, ': ID already exists - row will not be imported', CHAR(10))
                        FROM @tbl AS tbl
                        INNER JOIN dbo.Permission AS per ON per.ID = tbl.ID

                        DELETE FROM @tbl 
                        WHERE ID IN (SELECT ID FROM dbo.Permission)

                        SELECT @Output = CONCAT(@Output, tbl.ID, ': PermissionID already exists - row will not be imported', CHAR(10))
                        FROM @tbl AS tbl
                        INNER JOIN dbo.Role AS per ON per.PermissionID = tbl.ID

                        DELETE FROM @tbl 
                        WHERE ID IN (SELECT PermissionID FROM dbo.Role)

                        SELECT @Output = CONCAT(@Output, tbl.AnrName, ': AspNetRole already exists - row will not be imported', CHAR(10))
                        FROM @tbl AS tbl
                        INNER JOIN dbo.AspNetRoles AS anr ON anr.Name = tbl.AnrName

                        DELETE FROM @tbl 
                        WHERE AnrName IN (SELECT Name FROM dbo.AspNetRoles)

                        DECLARE @AspNetRoles TABLE(
                          Id NVARCHAR(450)
                          ,Name NVARCHAR(256)
                          ,NormalizedName NVARCHAR(256)
                          ,ConcurrencyStamp NVARCHAR(max)
                        );
                        INSERT INTO @AspNetRoles (Id, Name, NormalizedName, ConcurrencyStamp)
                        SELECT NEWID(), tbl.AnrName, UPPER(tbl.AnrName), NEWID()
                        FROM @tbl AS tbl
                        WHERE tbl.AnrName IS NOT NULL

                        DECLARE @Permission TABLE(
                          ID VARCHAR(100)
                          ,[Weight] SMALLINT
                          ,ResourceKey VARCHAR(100)
                          ,IsComputed BIT
                        )
                        INSERT INTO @Permission (ID, [Weight], ResourceKey, IsComputed)
                        SELECT tbl.ID, tbl.Weight, tbl.ResourceKey, tbl.IsComputed
                        FROM @tbl AS tbl
                        WHERE tbl.ID IS NOT NULL

                        DECLARE @Role TABLE(
                          ASPNETRoleID NVARCHAR(450)
                          ,ParentASPNETRoleID NVARCHAR(450)
                          ,ResourceKey VARCHAR(100)
                          ,PermissionID VARCHAR(100)
                          ,VisibleType TINYINT
                          ,DefaultValue BIT
                        )
                        INSERT INTO @Role (ASPNETRoleID, ParentASPNETRoleID, ResourceKey, PermissionID, VisibleType, DefaultValue)
                        SELECT anr.Id, anrP.Id, tbl.RoleResourceKey, tbl.ID, tbl.RoleVisibleType, tbl.RoleDefaultValue
                        FROM @tbl AS tbl
                        LEFT JOIN @AspNetRoles AS anr ON anr.Name = tbl.AnrName
                        OUTER APPLY (
                          SELECT TOP(1) *
                          FROM (
                            SELECT *
                            FROM dbo.AspNetRoles AS anrDB
                            WHERE anrDB.Name = tbl.ParentAnrName
                            UNION ALL
                            SELECT *
                            FROM @AspNetRoles AS anrP 
                            WHERE anrP.Name = tbl.ParentAnrName
                          ) AS anrP
                        ) AS anrP
                        WHERE tbl.AnrName IS NOT NULL

                        INSERT INTO dbo.AspNetRoles (Id, Name, NormalizedName, ConcurrencyStamp)
                        SELECT Id, Name, NormalizedName, ConcurrencyStamp FROM @AspNetRoles

                        INSERT INTO dbo.Permission (ID, [Weight], ResourceKey, IsComputed)
                        SELECT ID, [Weight], ResourceKey, IsComputed FROM @Permission

                        INSERT INTO dbo.Role (ASPNETRoleID, ParentASPNETRoleID, ResourceKey, PermissionID, VisibleType, DefaultValue)
                        SELECT ASPNETRoleID, ParentASPNETRoleID, ResourceKey, PermissionID, VisibleType, DefaultValue FROM @Role

                        SET @Output = CONCAT(@Output, 'OK :-); ', (SELECT COUNT(ID) FROM @tbl), ' rows should be imported', CHAR(10))

                      END TRY  
                      BEGIN CATCH  

                        SET @Output = CONCAT(@Output, (SELECT ERROR_MESSAGE() AS ErrorMessage), CHAR(10))

                      END CATCH;  

                      UPDATE usr.UtilityImporter
                      SET Output = @Output
                      WHERE ID = @ID

                      
                    </SQL>
                    <Parameters>
                      <dsp:Parameter xsi:type="dsp:VariableParameter" Ident="ImportString" DataType="String" />
                      <dsp:Parameter xsi:type="dsp:VariableParameter" Ident="ID" DataType="Number" />
                    </Parameters>
                  </DataSource>
                </Action>

                
              </Actions>
            </Button>

            <Button Ident="ImportAsSegment" IsVisible="true">
              <Actions>
                <Action xsi:type="Required" ActionStart="BeforeValidation">
                  <Idents>
                    <string>ImportString</string>
                  </Idents>
                </Action>    

                <Action xsi:type="ActionTrigger" Ident="ImportAsSegmentAction" ActionStart="AfterSave">
                  <DataSource>
                    <SQL>
                      DECLARE @Output VARCHAR(MAX) = 'Inserting as Segment:' + CHAR(10);

                      SET @ImportString = REPLACE(@ImportString, ';', ',');

                      BEGIN TRY  
                        
                        DECLARE @tbl TABLE(ID VARCHAR(MAX), PermissionID VARCHAR(MAX))
                        INSERT INTO @tbl EXEC usr.[ConvertFromCSV] @ImportString;

                        UPDATE @tbl
                        SET 
                          ID = IIF(ID = '', NULL, ID)
                          ,PermissionID = IIF(PermissionID = '', NULL, PermissionID)

                        SELECT @Output = CONCAT(@Output, tbl.ID, ': ID already exists - row will not be imported', CHAR(10))
                        FROM @tbl AS tbl
                        INNER JOIN dbo.SegmentType AS [set] ON [set].ID = tbl.ID

                        DELETE FROM @tbl 
                        WHERE ID IN (SELECT ID FROM dbo.SegmentType)

                        SELECT @Output = CONCAT(@Output, tbl.ID, ': Can not find PermissionID ', tbl.PermissionID,' - row will not be imported', CHAR(10))
                        FROM @tbl AS tbl
                        LEFT JOIN dbo.Role AS rol ON rol.PermissionID = tbl.PermissionID
                        WHERE rol.PermissionID IS NULL

                        DELETE FROM @tbl
                        WHERE PermissionID NOT IN (SELECT PermissionID FROM dbo.Role)

                        UPDATE tbl
                        SET PermissionID = (SELECT TOP(1) rol.ASPNETRoleID FROM dbo.[Role] AS rol WHERE rol.PermissionID = tbl.PermissionID)
                        FROM @tbl AS tbl

                        INSERT INTO dbo.SegmentType (ID, ASPNETRoleID)
                        SELECT ID, PermissionID
                        FROM @tbl

                        SET @Output = CONCAT(@Output, 'OK :-); ', (SELECT COUNT(ID) FROM @tbl), ' rows should be imported', CHAR(10))

                      END TRY  
                      BEGIN CATCH  

                        SET @Output = CONCAT(@Output, (SELECT ERROR_MESSAGE() AS ErrorMessage), CHAR(10))

                      END CATCH;  

                      UPDATE usr.UtilityImporter
                      SET Output = @Output
                      WHERE ID = @ID

                      
                    </SQL>
                    <Parameters>
                      <dsp:Parameter xsi:type="dsp:VariableParameter" Ident="ImportString" DataType="String" />
                      <dsp:Parameter xsi:type="dsp:VariableParameter" Ident="ID" DataType="Number" />
                    </Parameters>
                  </DataSource>
                </Action>

                
              </Actions>
            </Button>

            <Button Ident="ImportAsHistoryType" IsVisible="true">
              <Actions>
                <Action xsi:type="Required" ActionStart="BeforeValidation">
                  <Idents>
                    <string>ImportString</string>
                  </Idents>
                </Action>    

                <Action xsi:type="ActionTrigger" Ident="ImportAsHistoryTypeAction" ActionStart="AfterSave">
                  <DataSource>
                    <SQL>
                      DECLARE @Output VARCHAR(MAX) = 'Inserting as History:' + CHAR(10);

                      SET @ImportString = REPLACE(@ImportString, ';', ',');

                      BEGIN TRY  
                        
                        DECLARE @tbl TABLE(ID VARCHAR(MAX), ResourceKey VARCHAR(MAX), IconCssClass VARCHAR(MAX), ColorCssClass VARCHAR(MAX))
                        INSERT INTO @tbl EXEC usr.[ConvertFromCSV] @ImportString;

                        UPDATE @tbl
                        SET 
                          ID = IIF(ID = '', NULL, ID)
                          ,ResourceKey = IIF(ResourceKey = '', NULL, ResourceKey)
                          ,IconCssClass = IIF(IconCssClass = '', NULL, IconCssClass)
                          ,ColorCssClass = IIF(ColorCssClass = '', NULL, ColorCssClass)

                        SELECT @Output = CONCAT(@Output, tbl.ID, ': ID already exists - row will not be imported', CHAR(10))
                        FROM @tbl AS tbl
                        INNER JOIN dbo.HistoryType AS hit ON hit.ID = tbl.ID

                        DELETE FROM @tbl 
                        WHERE ID IN (SELECT ID FROM dbo.HistoryType)

                        INSERT INTO dbo.HistoryType (ID, ResourceKey, IconCssClass, ColorCssClass)
                        SELECT ID, ResourceKey, IconCssClass, ColorCssClass
                        FROM @tbl

                        SET @Output = CONCAT(@Output, 'OK :-); ', (SELECT COUNT(ID) FROM @tbl), ' rows should be imported', CHAR(10))

                      END TRY  
                      BEGIN CATCH  

                        SET @Output = CONCAT(@Output, (SELECT ERROR_MESSAGE() AS ErrorMessage), CHAR(10))

                      END CATCH;  

                      UPDATE usr.UtilityImporter
                      SET Output = @Output
                      WHERE ID = @ID

                      
                    </SQL>
                    <Parameters>
                      <dsp:Parameter xsi:type="dsp:VariableParameter" Ident="ImportString" DataType="String" />
                      <dsp:Parameter xsi:type="dsp:VariableParameter" Ident="ID" DataType="Number" />
                    </Parameters>
                  </DataSource>
                </Action>

                
              </Actions>
            </Button>

            <Button Ident="ImportAsCommunication" IsVisible="true">
              <Actions>
                <Action xsi:type="Required" ActionStart="BeforeValidation">
                  <Idents>
                    <string>ImportString</string>
                  </Idents>
                </Action>    

                <Action xsi:type="ActionTrigger" Ident="ImportAsCommunicationAction" ActionStart="AfterSave">
                  <DataSource>
                    <SQL>
                      DECLARE @Output VARCHAR(MAX) = 'Inserting as Communication:' + CHAR(10);

                      SET @ImportString = REPLACE(@ImportString, ';', ',');

                      BEGIN TRY  
                        
                        DECLARE @tbl TABLE(ID VARCHAR(MAX), ResrouceKey VARCHAR(MAX), ColorCssClass VARCHAR(MAX), IsUsePermission VARCHAR(MAX))
                        INSERT INTO @tbl EXEC usr.[ConvertFromCSV] @ImportString;
                        
                        UPDATE @tbl
                        SET 
                          ID = IIF(ID = '', NULL, ID)
                          ,ResrouceKey = IIF(ResrouceKey = '', NULL, ResrouceKey)
                          ,ColorCssClass = IIF(ColorCssClass = '', NULL, ColorCssClass)
                          ,IsUsePermission = IIF(IsUsePermission = '', NULL, IsUsePermission)

                        SELECT @Output = CONCAT(@Output, tbl.ID, ': ID already exists - row will not be imported', CHAR(10))
                        FROM @tbl AS tbl
                        INNER JOIN dbo.CommunicationType AS com ON com.ID = tbl.ID

                        DELETE FROM @tbl 
                        WHERE ID IN (SELECT ID FROM dbo.CommunicationType)

                        INSERT INTO dbo.CommunicationType (ID, ResrouceKey, ColorCssClass, IsUsePermission)
                        SELECT ID, ResrouceKey, ColorCssClass, IsUsePermission
                        FROM @tbl

                        SET @Output = CONCAT(@Output, 'OK :-); ', (SELECT COUNT(ID) FROM @tbl), ' rows should be imported', CHAR(10))

                      END TRY  
                      BEGIN CATCH  

                        SET @Output = CONCAT(@Output, (SELECT ERROR_MESSAGE() AS ErrorMessage), CHAR(10))

                      END CATCH;  

                      UPDATE usr.UtilityImporter
                      SET Output = @Output
                      WHERE ID = @ID

                      
                    </SQL>
                    <Parameters>
                      <dsp:Parameter xsi:type="dsp:VariableParameter" Ident="ImportString" DataType="String" />
                      <dsp:Parameter xsi:type="dsp:VariableParameter" Ident="ID" DataType="Number" />
                    </Parameters>
                  </DataSource>
                </Action>

                
              </Actions>
            </Button>

            <Button Ident="ImportAsNotificationGroup" IsVisible="true">
              <Actions>
                <Action xsi:type="Required" ActionStart="BeforeValidation">
                  <Idents>
                    <string>ImportString</string>
                  </Idents>
                </Action>    

                <Action xsi:type="ActionTrigger" Ident="ImportAsNotificationGroupAction" ActionStart="AfterSave">
                  <DataSource>
                    <SQL>
                      DECLARE @Output VARCHAR(MAX) = 'Inserting as Notification group:' + CHAR(10);

                      SET @ImportString = REPLACE(@ImportString, ';', ',');

                      BEGIN TRY  
                        
                        DECLARE @tbl TABLE(ID VARCHAR(MAX), ResourceKey VARCHAR(MAX), SenderType VARCHAR(MAX), FolderGroupSegmentIdent VARCHAR(MAX))
                        INSERT INTO @tbl EXEC usr.[ConvertFromCSV] @ImportString;

                        UPDATE @tbl
                        SET 
                          ID = IIF(ID = '', NULL, ID)
                          ,ResourceKey = IIF(ResourceKey = '', NULL, ResourceKey)
                          ,SenderType = IIF(SenderType = '', NULL, SenderType)
                          ,FolderGroupSegmentIdent = IIF(FolderGroupSegmentIdent = '', NULL, FolderGroupSegmentIdent)

                        SELECT @Output = CONCAT(@Output, tbl.ID, ': ID already exists - row will not be imported', CHAR(10))
                        FROM @tbl AS tbl
                        INNER JOIN dbo.NotificationSettingGroup AS nsg ON nsg.ID = tbl.ID

                        DELETE FROM @tbl 
                        WHERE ID IN (SELECT ID FROM dbo.NotificationSettingGroup)

                        INSERT INTO dbo.NotificationSettingGroup (ID, ResourceKey, SenderType, FolderGroupSegmentIdent)
                        SELECT ID, ResourceKey, SenderType, FolderGroupSegmentIdent
                        FROM @tbl

                        SET @Output = CONCAT(@Output, 'OK :-); ', (SELECT COUNT(ID) FROM @tbl), ' rows should be imported', CHAR(10))

                      END TRY  
                      BEGIN CATCH  

                        SET @Output = CONCAT(@Output, (SELECT ERROR_MESSAGE() AS ErrorMessage), CHAR(10))

                      END CATCH;  

                      UPDATE usr.UtilityImporter
                      SET Output = @Output
                      WHERE ID = @ID

                      
                    </SQL>
                    <Parameters>
                      <dsp:Parameter xsi:type="dsp:VariableParameter" Ident="ImportString" DataType="String" />
                      <dsp:Parameter xsi:type="dsp:VariableParameter" Ident="ID" DataType="Number" />
                    </Parameters>
                  </DataSource>
                </Action>
              </Actions>
            </Button>

            <Button Ident="ImportAsNotification" IsVisible="true">
              <Actions>
                <Action xsi:type="Required" ActionStart="BeforeValidation">
                  <Idents>
                    <string>ImportString</string>
                  </Idents>
                </Action>    

                <Action xsi:type="ActionTrigger" Ident="ImportAsNotificationAction" ActionStart="AfterSave">
                  <DataSource>
                    <SQL>
                      DECLARE @Output VARCHAR(MAX) = 'Inserting as Notification:' + CHAR(10);

                      SET @ImportString = REPLACE(@ImportString, ';', ',');

                      BEGIN TRY  
                        
                        DECLARE @tbl TABLE(ID VARCHAR(MAX), NotificationSettingGroupID VARCHAR(MAX))
                        INSERT INTO @tbl EXEC usr.[ConvertFromCSV] @ImportString;

                        UPDATE @tbl
                        SET 
                          ID = IIF(ID = '', NULL, ID)
                          ,NotificationSettingGroupID = IIF(NotificationSettingGroupID = '', NULL, NotificationSettingGroupID)

                        SELECT @Output = CONCAT(@Output, tbl.ID, ': ID already exists - row will not be imported', CHAR(10))
                        FROM @tbl AS tbl
                        INNER JOIN dbo.NotificationSettingIdent AS nsi ON nsi.ID = tbl.ID

                        DELETE FROM @tbl 
                        WHERE ID IN (SELECT ID FROM dbo.NotificationSettingIdent)

                        INSERT INTO dbo.NotificationSettingIdent (ID, NotificationSettingGroupID)
                        SELECT ID, NotificationSettingGroupID
                        FROM @tbl

                        SET @Output = CONCAT(@Output, 'OK :-); ', (SELECT COUNT(ID) FROM @tbl), ' rows should be imported', CHAR(10))

                      END TRY  
                      BEGIN CATCH  

                        SET @Output = CONCAT(@Output, (SELECT ERROR_MESSAGE() AS ErrorMessage), CHAR(10))

                      END CATCH;  

                      UPDATE usr.UtilityImporter
                      SET Output = @Output
                      WHERE ID = @ID

                      
                    </SQL>
                    <Parameters>
                      <dsp:Parameter xsi:type="dsp:VariableParameter" Ident="ImportString" DataType="String" />
                      <dsp:Parameter xsi:type="dsp:VariableParameter" Ident="ID" DataType="Number" />
                    </Parameters>
                  </DataSource>
                </Action>
              </Actions>
            </Button>

          </Buttons>
        </Group>
      </Groups>
    </Step>
  </Steps>
</WorkFlow>